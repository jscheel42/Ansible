---

- name: install zypper packages required by pip for psycopg2
  zypper:
    name: "{{ item }}"
    state: present
  with_items:
    - gcc
    - python-devel
    - python-pip
    - "postgresql{{ postgresql_version }}-devel"
  tags: postgresql

- name: install required pip modules
  pip:
    name: psycopg2
    executable: /usr/bin/pip2
    state: present
  tags: postgresql

- name: install postgresql
  zypper:
    name: "{{ item }}"
    state: present
  with_items:
    - "postgresql{{ postgresql_version }}-server"
  tags: postgresql

- name: create directory for postgresql databases
  file:
    path: "{{ postgresql_dir }}"
    owner: postgres
    state: directory
  tags: postgresql

- name: init database
  become_user: "postgres"
  shell: "initdb -D {{ postgresql_dir }}"
  args:
    creates: "{{ postgresql_dir }}/PG_VERSION"
  tags: postgresql

- name: remove unwanted init files
  file:
    path: /etc/init.d/postgresql
    state: absent
  tags: postgresql

- name: setup systemd service file
  template:
    src: postgresql.service.j2
    dest: /usr/lib/systemd/system/postgresql{{ postgresql_version }}.service
  register: postgresql_service_update
  tags: postgresql

- name: reload systemd config if service file is changed
  shell: systemctl daemon-reload
  when: postgresql_service_update|changed
  tags: postgresql

- name: setup postgresql config
  template:
    src: postgresql.conf.j2
    dest: "{{ postgresql_dir }}/postgresql.conf"
  register: postgresql_config_update
  tags: postgresql

- name: setup pg_hba
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_dir }}/pg_hba.conf"
  register: postgresql_pg_hba_update
  tags: postgresql

- name: restart postgresql service if config changes are made
  service:
    name: postgresql{{ postgresql_version }}
    state: restarted
  when: postgresql_config_update|changed or postgresql_pg_hba_update|changed
  tags: postgresql

- name: start postgresql service
  service:
    name: postgresql{{ postgresql_version }}
    state: started
    enabled: yes
  tags: postgresql

- name: add postgresql admin users
  postgresql_user:
    name: "{{ item.name }}"
    role_attr_flags: "{{ item.perms }}"
    port: "{{ postgresql_port }}"
    password: "{{ item.password }}"
  with_items: postgresql_admins
  when: postgresql_admins[0].name is defined
  no_log: True # Don't want password showing in log, this module does not filter it for some reason
  tags: postgresql

- name: add postgresql users
  postgresql_user:
    name: "{{ item.name }}"
    role_attr_flags: "{{ item.perms }}"
    port: "{{ postgresql_port }}"
    password: "{{ item.password }}"
  with_items: postgresql_users
  when: postgresql_users[0].name is defined
  no_log: True # Don't want password showing in log, this module does not filter it for some reason
  tags: postgresql

- name: add postgresql databases
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner }}"
    login_user: postgres
    port: "{{ postgresql_port }}"
  with_items: postgresql_databases
  when: postgresql_databases[0].name is defined
  tags: postgresql
